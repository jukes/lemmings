requirejs.config({
    //By default load any module IDs from js/lib
    baseUrl: 'js/lib',
    shim: {
        easeljs: {
            exports: 'createjs'
        }
    },
    //except, if the module ID starts with "app",
    //load it from the js/app directory. paths
    //config is relative to the baseUrl, and
    //never includes a ".js" extension since
    //the paths config could be for a directory.
    paths: {
        app: '../app'
    }
});

requirejs(['my/spritesLoader', 'easeljs'],
        function(spritesLoader, createjs) {

            var canvas;
            var stage;
            var screen_width;
            var screen_height;
            var bmpAnimation;

            canvas = document.getElementById('gameCanvas');

            spritesLoader.onImagesLoaded = function(imgList) {
                for (var prop in imgList) {
                    console.log('Loaded: ' + imgList[prop].src);
                }
                startGame();
            };
            spritesLoader.onImagesError = function(imageObj) {
                console.log('Error loading [' + imageObj.src + ']');
            };

            //Load the sprites!!!
            spritesLoader.load();

            function reset() {
                stage.removeAllChildren();
                createjs.Ticker.removeAllListeners();
                stage.update();
            }

            function startGame() {
                
                console.log('startGame 1');

                //Create a new stage.
                stage = new createjs.Stage(canvas);

                //Save canvas dimensions for later calcs
                screen_width = canvas.width;
                screen_height = canvas.height;

                //Create spritesheet and assign the associated data
                var spriteSheet = new createjs.SpriteSheet({
                    //Image to use
                    images: [spritesLoader.sheet('monsterARun')],
                    //Width, height and registration point of each sprite
                    frames: {width: 64, height: 64, regX: 32, regY: 32},
                    // To slow down the animation loop of the sprite, we set the frequency to 4 to slow down by a 4x factor
                    animations: {
                        walk: [0, 9, 'walk', 6]
                    }
                });
                
                console.log('startGame 2');

                // To save file size, the loaded sprite sheet only includes left facing animations
                // we could flip the display objects with scaleX=-1, but this is expensive in most browsers
                // instead, we generate a new sprite sheet which includes the flipped animations
                createjs.SpriteSheetUtils.addFlippedFrames(spriteSheet, true, false, false);

                // Idle sequence of the monster
                var spriteSheetIdle = new createjs.SpriteSheet({
                    images: [spritesLoader.sheet('monsterAIdle')],
                    frames: {width: 64, height: 64, regX: 32, regY: 32},
                    animations: {
                        idle: [0, 10, "idle", 4]
                    }
                });
                
                console.log('startGame 3');

                bmpAnimationIdle = new createjs.BitmapAnimation(spriteSheetIdle);
                bmpAnimationIdle.name = "monsteridle1";
                bmpAnimationIdle.x = 16;
                bmpAnimationIdle.y = 32;


                //Create a BitmapAnimation instance to display and play back the sprite sheet:
                bmpAnimation = new createjs.BitmapAnimation(spriteSheet);

                // set the registration point (the point it will be positioned and rotated around)
                // to the center of the frame dimensions:
                bmpAnimation.regX = bmpAnimation.spriteSheet.frameWidth / 2 | 0;
                bmpAnimation.regY = bmpAnimation.spriteSheet.frameHeight / 2 | 0;

                // walk_h has been generated by addFlippedFrames and
                // contained the right facing animations
                bmpAnimation.gotoAndPlay("walk_h"); 	//walking from left to right
                
                console.log('startGame 4');

                // set up a shadow. Note that shadows are ridiculously expensive. You could display hundreds
                // of animated rats if you disabled the shadow.
                bmpAnimation.shadow = new createjs.Shadow("#454", 0, 5, 4);

                bmpAnimation.name = 'monster1';
                bmpAnimation.direction = 90;
                bmpAnimation.vX = 1;
                bmpAnimation.vY = 0;
                bmpAnimation.x = 16;
                bmpAnimation.y = 32;

                //Have each monster start at a specific frame
                bmpAnimation.currentFrame = 10;
                stage.addChild(bmpAnimation);
                
                console.log('startGame 5');

                //
                createjs.Ticker.addListener(window);
                createjs.Ticker.useRAF = true;
                //Best framerate targeted (60 fps)
                createjs.Ticker.setFPS(60);
                
                createjs.Ticker.addEventListener('tick',handleTick);
                
                console.log('startGame 6');
                

            }

            function handleTick() {
                
                // Hit testing the screen width, otherwise our sprite would disappear
                if (bmpAnimation.x >= screen_width - 16) {
                    // We've reached the right side of our screen
                    // We need to walk left now to go back to our initial position
                    bmpAnimation.direction = -90;
                    bmpAnimation.gotoAndPlay("walk")
                }

                if (bmpAnimation.x < 16) {
                    // We've reached the left side of our screen
                    // We need to walk right now
                    bmpAnimation.direction = 90;
                    bmpAnimation.gotoAndPlay("walk_h");
                    stage.removeChild(bmpAnimation);
                    bmpAnimationIdle.gotoAndPlay("idle");
                    stage.addChild(bmpAnimationIdle);

                }

                // Moving the sprite based on the direction & the speed
                if (bmpAnimation.direction === 90) {
                    bmpAnimation.x += bmpAnimation.vX;
                    bmpAnimation.y += bmpAnimation.vY;
                }
                else {
                    bmpAnimation.x -= bmpAnimation.vX;
                    bmpAnimation.y -= bmpAnimation.vY;
                }

                //Update the stage
                stage.update();

            }


        }
);

    