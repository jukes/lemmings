define(['my/assetsHolder', 'easeljs', 'ndgmr'],
        function(assetsHolder, createjs, ndgmr) {

            //var sprites = {};    
            //var lemming = {};


            //Load lemmings sprites
            //Walking sequence
            var spriteSheetWalking;

            //Falling sequence
            var spriteSheetFalling;

            function __init() {
                spriteSheetWalking = new createjs.SpriteSheet({
                    //Image to use
                    images: [assetsHolder.sheet('lemmingWalk')],
                    //Width, height and registration point of each sprite
                    frames: {width: 64, height: 64, regX: 32, regY: 32},
                    //frames: {width: 85, height: 83, regX: 32, regY: 32},

                    // To slow down the animation loop of the sprite, we set the frequency to 4 to slow down by a 4x factor
                    animations: {
                        walk: [0, 9, 'walk', 6]
                                //walk: [0, 4, 'walk', 6]
                    }
                });

                //Walking to the right sequence
                createjs.SpriteSheetUtils.addFlippedFrames(spriteSheetWalking, true, false, false);

                spriteSheetFalling = new createjs.SpriteSheet({
                    images: [assetsHolder.sheet('lemmingFall')],
                    frames: {width: 64, height: 64, regX: 32, regY: 32},
                    animations: {
                        fall: [0, 10, "fall", 4]
                    }
                });

            }

            return {
                //Declare lemming statuses
                SPAWN: 0,
                WALKING: 1,
                FALLING: 2,
                SOFT_FALLING: 3,
                DIGGING: 4,
                BUILDING: 5,
                STOPPING: 6,
                /**
                 * Initializes sprites to be used by subsequent create calls
                 * @returns {undefined}
                 */
                init: function() {
                    __init();
                },
                /**
                 * 
                 * @param {createjs.Stage} aStage
                 * @param {createjs.Bitmap} aLevel 
                 * @param {Number} scr_width
                 * @param {Number} scr_height
                 * @returns {status: Number, screen_width: Number, screen_height: Number, walkAnimation: createjs.BitmapAnimation, fallAnimation: createjs.BitmapAnimation}
                 */
                create: function(aStage, aLevel, aLevelObj, scr_width, scr_height) {

                    var lemming = {
                        SPAWN: this.SPAWN,
                        WALKING: this.WALKING,
                        FALLING: this.FALLING,
                        SOFT_FALLING: this.SOFT_FALLING,
                        DIGGING: this.DIGGING,
                        BUILDING: this.BUILDING,
                        STOPPING: this.STOPPING,
                        status: this.SPAWN,
                        screen_width: scr_width,
                        screen_height: scr_height,
                        stage: aStage,
                        level: aLevel,
                        levelObj: aLevelObj,
                        width: 64,
                        height: 64
                    };

                    //Create a BitmapAnimation instance to display and play back the sprite sheet:
                    lemming.walkAnimation = new createjs.BitmapAnimation(spriteSheetWalking);

                    // set the registration point (the point it will be positioned and rotated around)
                    // to the center of the frame dimensions:
                    lemming.walkAnimation.regX = lemming.walkAnimation.spriteSheet.frameWidth / 2 | 0;
                    lemming.walkAnimation.regY = lemming.walkAnimation.spriteSheet.frameHeight / 2 | 0;

                    // walk_h has been generated by addFlippedFrames and
                    // contained the right facing animations
                    //lemming.walkAnimation.gotoAndPlay("walk_h"); 	//walking from left to right

                    // set up a shadow. Note that shadows are ridiculously expensive. You could display hundreds
                    // of animated rats if you disabled the shadow.
                    //lemming.walkAnimation.shadow = new createjs.Shadow("#454", 0, 5, 4);

                    lemming.walkAnimation.name = 'lemmingWalk';
                    lemming.walkAnimation.direction = 90;
                    lemming.walkAnimation.vX = 1;
                    lemming.walkAnimation.vY = 3;
                    lemming.walkAnimation.x = 16;
                    lemming.walkAnimation.y = 32;

                    //Falling animation
                    lemming.fallAnimation = new createjs.BitmapAnimation(spriteSheetFalling);
                    lemming.fallAnimation.name = "lemmingFall";
                    lemming.fallAnimation.direction = 270;
                    lemming.fallAnimation.vX = 0;
                    lemming.fallAnimation.vY = 3;
                    lemming.fallAnimation.x = 16;
                    lemming.fallAnimation.y = 32;
                    lemming.fallAnimation.regX = lemming.fallAnimation.spriteSheet.frameWidth / 2 | 0;
                    lemming.fallAnimation.regY = lemming.fallAnimation.spriteSheet.frameHeight / 2 | 0;
                    lemming.fallAnimation.gotoAndPlay("fall");


                    lemming.getStatus = function() {
                        return this.status;
                    };

                    lemming.setStatus = function(aStatus) {
                        this.status = aStatus;
                    };

                    /**
                     * 
                     * @param {type} currentSprite
                     * @returns {Boolean}
                     */
                    lemming.collisionY = function(currentSprite) {

                        //console.log(currentSprite);

                        var collision = false;

                        if (currentSprite.y + this.height - 32 >= this.level.y) {

                            var j = currentSprite.x;
                            var i = currentSprite.y + this.height - 32 - 190;
                            if (i < this.levelObj.length && j < this.levelObj[0].length) {
                                //alert('ii='+i+', j='+j);

                                //console.log('i=' + i + ', j=' + j + ' Val: ' + this.levelObj[i][j]);
                                collision = this.levelObj[i][j] !== 0;
                            }
                        }

                        return collision;
                    };

                    lemming.collisionX = function(currentSprite, maxHop, directionAngle) {

                        var collision = {collision: false, xOffset:0, yOffset: 0};

                        if (currentSprite.y + this.height - 32 >= this.level.y) {

                            var j = directionAngle === 90 ? currentSprite.x + 14  : currentSprite.x-16;
                            var i = currentSprite.y + this.height - 32 - 190;
                            if (i < this.levelObj.length && j < this.levelObj[0].length) {
                                //alert('ii='+i+', j='+j);

                                //console.log('i=' + i + ', j=' + j + ' Val: ' + this.levelObj[i][j]);
                                var wallAhead = this.levelObj[i-4][j] !== 0;
                                var climbable = false;
                                if (wallAhead) {
                                    //alert('wallAhead!: i='+i+', j='+j+' val='+this.levelObj[i][j]);
                                    for (var k = 1; k <= maxHop; k++) {
                                        //console.log(this.levelObj[i - k][j]);
                                        if (this.levelObj[i - k][j] === 0) {
                                            climbable = true;
                                            collision.yOffset = k-4;
                                            //collision.xOffset = j+2;
                                            break;
                                        }
                                    }
                                    //if(!climbable)
                                      // alert('Not climbable! yOff: '+collision.yOffset);
                                }
                                //console.log('Climb it? '+climbable);
                                collision.collision = wallAhead && !climbable;
                            }
                        }
                        return collision;
                    };

                    /**
                     * 
                     * @returns {undefined}
                     */
                    lemming.tick = function() {
                        //console.log('Calling tick from deep inside object');

                        switch (this.status) {
                            case this.SPAWN:
                                //var collision = ndgmr.checkPixelCollision(this.fallAnimation, this.level, 0);
                                //var collision = ndgmr.checkRectCollision(this.fallAnimation, this.level);

                                var collision = this.collisionY(this.fallAnimation);  //this.fallAnimation.y + this.height >= this.level.y && this.levelObj[this.fallAnimation.x][190+this.fallAnimation.y + this.height] !== 0;

                                if (collision) {
                                    this.status = this.WALKING;
                                    this.walkAnimation.direction = 90;
                                    this.walkAnimation.x = this.fallAnimation.x;
                                    this.walkAnimation.y = this.fallAnimation.y;
                                    this.stage.removeChild(this.fallAnimation);
                                    this.walkAnimation.gotoAndPlay('walk_h');
                                    this.stage.addChild(this.walkAnimation);
                                }
                                else {
                                    this.fallAnimation.y += this.fallAnimation.vY;
                                }
                                break;
                            case this.WALKING:
                                //alert('Walking');
                                this.walkAnimation.x += this.walkAnimation.vX*(this.walkAnimation.direction/Math.abs(this.walkAnimation.direction));

                                var collidedX = this.collisionX(this.walkAnimation, 20, this.walkAnimation.direction);
                                if (collidedX.collision) {
                                    if (this.walkAnimation.direction === 90) {
                                        this.walkAnimation.direction = -90;
                                        this.walkAnimation.gotoAndPlay('walk');
                                        //alert('Gonna walk');
                                    }
                                    else {
                                        this.walkAnimation.direction = 90;
                                        this.walkAnimation.gotoAndPlay('walk_h');
                                        //alert('Gonna walk_h');
                                    }
                                }                                
                                else if (collidedX.yOffset>0) {
                                    alert('Adjusted y from colideX. Offs: '+collidedX.yOffset);
                                    this.walkAnimation.y -= collidedX.yOffset;
                                    //this.walkAnimation.x += 2;
                                }
                                
                                //Avoid "Walking in the Air" mode
                                var collidedY = this.collisionY(this.walkAnimation);
                                if (!collidedY && collidedX.yOffset===0) {
                                    //alert('Adjusted y from colideY'+rand);
                                    this.walkAnimation.y += this.walkAnimation.vY;
                                }

                                break;
                        }

                        // Hit testing the screen width, otherwise our sprite would disappear
//                        if (this.walkAnimation.x >= this.screen_width - 16) {
//                            // We've reached the right side of our screen
//                            // We need to walk left now to go back to our initial position
//                            this.walkAnimation.direction = -90;
//                            this.walkAnimation.gotoAndPlay("walk");
//                        }
//
//                        if (this.walkAnimation.x < 16) {
//                            // We've reached the left side of our screen
//                            // We need to walk right now
//                            this.walkAnimation.direction = 90;
//                            this.walkAnimation.gotoAndPlay("walk_h");
//                            this.stage.removeChild(this.walkAnimation);
//                            this.fallAnimation.gotoAndPlay("fall");
//                            this.stage.addChild(this.fallAnimation);
//
//                        }
//
//                        // Moving the sprite based on the direction & the speed
//                        if (this.walkAnimation.direction === 90) {
//                            this.walkAnimation.x += this.walkAnimation.vX;
//                            this.walkAnimation.y += this.walkAnimation.vY;
//                        }
//                        else {
//                            this.walkAnimation.x -= this.walkAnimation.vX;
//                            this.walkAnimation.y -= this.walkAnimation.vY;
//                        }
                    };

                    return lemming;
                }
            };

        });