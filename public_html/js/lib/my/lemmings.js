define(['my/assetsHolder', 'easeljs'],
        function(assetsHolder, createjs) {

            //var sprites = {};    
            //var lemming = {};


            //Load lemmings sprites
            //Walking sequence
            var spriteSheetWalking;

            //Falling sequence
            var spriteSheetFalling;

            function __init() {
                spriteSheetWalking = new createjs.SpriteSheet({
                    //Image to use
                    images: [assetsHolder.sheet('lemmingWalk')],
                    //Width, height and registration point of each sprite
                    frames: {width: 64, height: 64, regX: 32, regY: 32},
                    //frames: {width: 85, height: 83, regX: 32, regY: 32},

                    // To slow down the animation loop of the sprite, we set the frequency to 4 to slow down by a 4x factor
                    animations: {
                        walk: [0, 9, 'walk', 6]
                                //walk: [0, 4, 'walk', 6]
                    }
                });

                //Walking to the right sequence
                createjs.SpriteSheetUtils.addFlippedFrames(spriteSheetWalking, true, false, false);

                spriteSheetFalling = new createjs.SpriteSheet({
                    images: [assetsHolder.sheet('lemmingFall')],
                    frames: {width: 64, height: 64, regX: 32, regY: 32},
                    animations: {
                        fall: [0, 10, "fall", 4],
                        dig: [0, 10, "dig", 25]
                    }
                });

            }

            return {
                //Declare lemming statuses
                SPAWN: 0,
                WALKING: 1,
                FALLING: 2,
                SOFT_FALLING: 3,
                DIGGING: 4,
                BUILDING: 5,
                STOPPING: 6,
                /**
                 * Initializes sprites to be used by subsequent create calls
                 * @returns {undefined}
                 */
                init: function() {
                    __init();
                },
                /**
                 * 
                 * @param {createjs.Stage} aStage
                 * @param {createjs.Bitmap} aLevel 
                 * @param {Number} scr_width
                 * @param {Number} scr_height
                 * @returns {status: Number, screen_width: Number, screen_height: Number, walkAnimation: createjs.BitmapAnimation, fallAnimation: createjs.BitmapAnimation}
                 */
                create: function(aStage, aLevel, aLevelObj, scr_width, scr_height) {

                    //var shovelPath = [25.727381,0, 24.98167,1.7752109, 23.551717,2.1983119, 22.809504,3.0775299, 20.814382,3.5021739, 21.127611,4.3798489, 19.513802,5.2306449, 19.316337,6.6212439, 17.593587,6.8753919, 17.014799,7.9818789, 16.000212,8.5485969, 15.584843,9.3141269, 14.461305,9.7814049, 12.684088,9.9077249, 9.7385789,9.3836389, 8.0459829,8.7459369, 6.6218659,7.5841489, 6.6685369,6.8200909, 5.4934379,6.2534079, 5.1354699,5.5162649, 3.9876119,5.0063899, 4.3981049,4.1272079, 2.7230288,3.5620329, 2.1705068,2.5991269, 0.26001734,1.5920459];
                    var shovelPath = [26, 0, 25, 2, 24, 2, 23, 3, 21, 4, 21, 4, 20, 5, 19, 7, 18, 7, 17, 8, 16, 9, 16, 9, 14, 10, 13, 10, 10, 9, 8, 9, 7, 8, 7, 7, 5, 6, 5, 6, 4, 5, 4, 4, 3, 4, 2, 3, 0, 2]

                    var lemming = {
                        SPAWN: this.SPAWN,
                        WALKING: this.WALKING,
                        FALLING: this.FALLING,
                        SOFT_FALLING: this.SOFT_FALLING,
                        DIGGING: this.DIGGING,
                        BUILDING: this.BUILDING,
                        STOPPING: this.STOPPING,
                        status: this.SPAWN,
                        currentSprite: null,
                        screen_width: scr_width,
                        screen_height: scr_height,
                        stage: aStage,
                        level: aLevel,
                        levelObj: aLevelObj,
                        //levelContainer: levelContainer,
                        width: 64,
                        height: 64,
                        canDig: false,
                        canBuild: false
                    };

                    //Create a BitmapAnimation instance to display and play back the sprite sheet:
                    lemming.walkAnimation = new createjs.BitmapAnimation(spriteSheetWalking);

                    // set the registration point (the point it will be positioned and rotated around)
                    // to the center of the frame dimensions:
                    lemming.walkAnimation.regX = lemming.walkAnimation.spriteSheet.frameWidth / 2 | 0;
                    lemming.walkAnimation.regY = lemming.walkAnimation.spriteSheet.frameHeight / 2 | 0;

                    // walk_h has been generated by addFlippedFrames and
                    // contained the right facing animations
                    //lemming.walkAnimation.gotoAndPlay("walk_h"); 	//walking from left to right

                    // set up a shadow. Note that shadows are ridiculously expensive. You could display hundreds
                    // of animated rats if you disabled the shadow.
                    //lemming.walkAnimation.shadow = new createjs.Shadow("#454", 0, 5, 4);

                    lemming.walkAnimation.name = 'lemmingWalk';
                    lemming.walkAnimation.direction = 90;
                    lemming.walkAnimation.vX = 1;
                    lemming.walkAnimation.vY = 3;
                    lemming.walkAnimation.x = 16;
                    lemming.walkAnimation.y = 32;

                    //Falling animation
                    lemming.fallAnimation = new createjs.BitmapAnimation(spriteSheetFalling);
                    lemming.fallAnimation.name = "lemmingFall";
                    lemming.fallAnimation.direction = 270;
                    lemming.fallAnimation.vX = 0;
                    lemming.fallAnimation.vY = 3;
                    lemming.fallAnimation.x = 16;
                    lemming.fallAnimation.y = 32;
                    lemming.fallAnimation.regX = lemming.fallAnimation.spriteSheet.frameWidth / 2 | 0;
                    lemming.fallAnimation.regY = lemming.fallAnimation.spriteSheet.frameHeight / 2 | 0;
                    lemming.fallAnimation.gotoAndPlay("fall");

                    lemming.currentSprite = lemming.fallAnimation;


                    lemming.getStatus = function() {
                        return this.status;
                    };

                    lemming.setStatus = function(aStatus) {
                        this.status = aStatus;
                    };

                    /**
                     * 
                     * @param {type} currentSprite
                     * @returns {Boolean}
                     */
                    lemming.collisionY = function() {

                        //console.log(currentSprite);

                        var collision = false;

                        if (this.currentSprite.y + this.height - 32 >= this.level.y) {

                            var j = this.currentSprite.x+16;
                            var i = this.currentSprite.y + this.height - 32 - 190;
                            if (i < this.levelObj.length && j < this.levelObj[0].length) {
                                //alert('ii='+i+', j='+j);

                                //console.log('i=' + i + ', j=' + j + ' Val: ' + this.levelObj[i][j]);
                                collision = this.levelObj[i][j] !== 0;
                            }
                        }
                        return collision;
                    };

                    lemming.collisionX = function(maxHop, directionAngle) {

                        var collision = {collision: false, xOffset: 0, yOffset: 0};

                        if (this.currentSprite.y + this.height - 32 >= this.level.y) {

                            var j = directionAngle === 90 ? this.currentSprite.x + 14 : this.currentSprite.x - 16;
                            var i = this.currentSprite.y + this.height - 32 - 190;
                            if (i < this.levelObj.length && j < this.levelObj[0].length) {
                                //alert('ii='+i+', j='+j);

                                //console.log('i=' + i + ', j=' + j + ' Val: ' + this.levelObj[i][j]);
                                var wallAhead = this.levelObj[i - 4][j] !== 0;
                                var climbable = false;
                                if (wallAhead) {
                                    //alert('wallAhead!: i='+i+', j='+j+' val='+this.levelObj[i][j]);
                                    for (var k = 1; k <= maxHop; k++) {
                                        //console.log(this.levelObj[i - k][j]);
                                        if (this.levelObj[i - k][j] === 0) {
                                            climbable = true;
                                            collision.yOffset = k - 4;
                                            //collision.xOffset = j+2;
                                            break;
                                        }
                                    }
                                    //if(!climbable)
                                    // alert('Not climbable! yOff: '+collision.yOffset);
                                }
                                //console.log('Climb it? '+climbable);
                                collision.collision = wallAhead && !climbable;
                            }
                        }
                        return collision;
                    };

                    lemming.cliffAhead = function(maxDepth, maxLen, directionAngle) {

                        var j = directionAngle === 90 ? this.currentSprite.x+16 : this.currentSprite.x+16;
                        var i = this.currentSprite.y + 32 - 190;

                        var k = 0;
                        for (k = 0; k < maxLen; k++) {
                            if (this.levelObj[i][j + k] !== 0) {
                                return false;
                            }
                        }
                        //alert('Cliff in X! [i='+i+', k='+k+', j+k='+(j+k)+', j='+j+']');
                        var offset = Math.floor(maxLen / 2);
                        for (k = 0; k < maxDepth; k++) {
                            if (this.levelObj[i + k][j + offset] !== 0) {
                                return false;
                            }
                        }
                        //alert('Cliff in Y! [i='+i+', offs='+offset+' j='+j+', k='+k+', i+k='+(i+k)+']');
                        return true;
                    };

                    /**
                     * 
                     * @returns {undefined}
                     */
                    lemming.dig = function() {
                        var levelContainer = this.stage.getChildByName('levelContainer');
                        var levelShape = levelContainer.getChildByName('levelShape');
//                        levelShape.graphics.ss(25, 'square').s('#ff0000');
//                        levelShape.graphics.mt(this.currentSprite.x - 2, this.currentSprite.y + 25 - 190);
//                        levelShape.graphics.lt(this.currentSprite.x - 2, this.currentSprite.y + 25 - 190 + 2);      
//                        var theShovel = assetsHolder.sheet('shovel');
//                        levelShape.graphics.beginFill('#ff0000').drawRect(this.currentSprite.x - 16, this.currentSprite.y + 32 - 190,32,5);
//                        levelShape.graphics.beginBitmapFill(theShovel).drawRect(this.currentSprite.x - 16, this.currentSprite.y + 32 - 190, theShovel.width, theShovel.height);
//                        levelShape.graphics.beginFill("rgba(255,255,255,1)").drawPolyStar(this.currentSprite.x, this.currentSprite.y + 32 - 190, 4+Math.floor(Math.random()*16), 13, Math.round(Math.random()*100)/100, Math.floor(Math.random()*91));

                        var xPos = this.currentSprite.x - 13;
                        var yPos = this.currentSprite.y + 28 - 190;
                        var enclosingSquareW = 26;
                        var enclosingSquareH = 10;
                        levelShape.graphics.beginFill('#000000');
                        levelShape.graphics.mt(xPos, yPos);
                        for (var i = 0; i < shovelPath.length; i += 2) {
                            levelShape.graphics.lt(xPos + shovelPath[i], yPos + shovelPath[i + 1]);
                        }
                        levelShape.graphics.closePath();

                        for (var i = 0; i <= enclosingSquareH; i++) {
                            if (this.levelObj[yPos + i]) { //Temp patch
                                for (var j = 0; j <= enclosingSquareW; j++) {
                                    //console.log('yPos+i=' + (yPos + i) + ' xPos+j=' + (xPos + j) + ' val=' + this.levelObj[yPos + i][xPos + j]);
                                    this.levelObj[yPos + i][xPos + j] = 0;
                                }
                            }
                        }

                        levelContainer.updateCache('destination-out');
//                        levelContainer.updateCache('source-over');
                        levelShape.graphics.clear();
//                        alert('alerta!!');
                    };

                    /**
                     * 
                     * @param {number} direction
                     * @returns {undefined}
                     */
                    lemming.build = function(direction) {
                        var levelContainer = this.stage.getChildByName('levelContainer');
                        var levelShape = levelContainer.getChildByName('levelShape');
                        if (direction === 90) {
                            var xPos = this.currentSprite.x + 16;
                            var yPos = this.currentSprite.y + 26 - 190;
                            var brickW = 32;
                            var brickH = 10;
                            levelShape.graphics.beginStroke('#472400').beginFill('#E68A00').rect(xPos, yPos, brickW, brickH);
                            levelContainer.updateCache('source-over');
                            levelShape.graphics.clear();
                            for (var i = 0; i <= brickH; i++) {
                                if (this.levelObj[yPos + i]) { //Temp patch
                                    for (var j = 0; j <= brickW; j++) {
                                        //console.log('yPos+i=' + (yPos + i) + ' xPos+j=' + (xPos + j) + ' val=' + this.levelObj[yPos + i][xPos + j]);
                                        this.levelObj[yPos + i][xPos + j] = 2;
                                    }
                                }
                            }
                        }
                    };

                    /**
                     * 
                     * @returns {undefined}
                     */
                    lemming.tick = function() {
                        //console.log('Calling tick from deep inside object');

                        switch (this.status) {

                            case this.FALLING:

                            case this.SPAWN:
                                //var collision = ndgmr.checkPixelCollision(this.fallAnimation, this.level, 0);
                                //var collision = ndgmr.checkRectCollision(this.fallAnimation, this.level);

                                var collision = this.collisionY(this.fallAnimation);  //this.fallAnimation.y + this.height >= this.level.y && this.levelObj[this.fallAnimation.x][190+this.fallAnimation.y + this.height] !== 0;

                                if (collision) {
                                    this.status = this.WALKING;
                                    this.walkAnimation.direction = 90;
                                    this.walkAnimation.x = this.fallAnimation.x;
                                    this.walkAnimation.y = this.fallAnimation.y;
                                    this.stage.removeChild(this.fallAnimation);
                                    this.currentSprite = this.walkAnimation;
                                    this.walkAnimation.gotoAndPlay('walk_h');
                                    this.stage.addChild(this.walkAnimation);
                                }
                                else {
                                    this.fallAnimation.y += this.fallAnimation.vY;
                                }
                                break;
                            case this.WALKING:

                                if (this.cliffAhead(30, 3, this.walkAnimation.direction)) {
                                    //alert('Cliff!');
                                    if (this.canBuild) {
                                        this.status = this.BUILDING;
                                        this.build(this.walkAnimation.direction);
                                    } else {
                                        this.status = this.FALLING;
                                        this.fallAnimation.x = this.currentSprite.x + 10;
                                        this.fallAnimation.y = this.currentSprite.y;
                                        this.stage.removeChild(this.walkAnimation);
                                        this.currentSprite = this.fallAnimation;
                                        this.fallAnimation.gotoAndPlay('fall');
                                        this.stage.addChild(this.fallAnimation);
                                    }
                                }
                                else if (this.canDig && this.walkAnimation.x > 150) {
                                    this.status = this.DIGGING;
                                    this.fallAnimation.x = this.currentSprite.x;
                                    this.fallAnimation.y = this.currentSprite.y;
                                    this.stage.removeChild(this.walkAnimation);
                                    this.currentSprite = this.fallAnimation;
                                    this.fallAnimation.gotoAndPlay('dig');
                                    this.stage.addChild(this.fallAnimation);
                                } else {

                                    //alert('Walking');
                                    this.walkAnimation.x += this.walkAnimation.vX * (this.walkAnimation.direction / Math.abs(this.walkAnimation.direction));

                                    var collidedX = this.collisionX(20, this.walkAnimation.direction);
                                    if (collidedX.collision) {
                                        if (this.walkAnimation.direction === 90) {
                                            this.walkAnimation.direction = -90;
                                            this.walkAnimation.gotoAndPlay('walk');
                                            //alert('Gonna walk');
                                        }
                                        else {
                                            this.walkAnimation.direction = 90;
                                            this.walkAnimation.gotoAndPlay('walk_h');
                                            //alert('Gonna walk_h');
                                        }
                                    }
                                    else if (collidedX.yOffset > 0) {
                                        //alert('Adjusted y from colideX. Offs: '+collidedX.yOffset);
                                        this.walkAnimation.y -= collidedX.yOffset;
                                        //this.walkAnimation.x += 2;
                                    }

                                    //Avoid "Walking in the Air" mode
                                    var collidedY = this.collisionY();
                                    if (!collidedY && collidedX.yOffset === 0) {
                                        //alert('Adjusted y from colideY'+rand);
                                        this.walkAnimation.y += this.walkAnimation.vY;
                                    }
                                }
                                break;
                            case this.DIGGING:
                                var shovelHeigth = 6;
                                this.dig();
                                this.fallAnimation.y += shovelHeigth; //this.walkAnimation.vY; //
                                break;
                            case this.BUILDING:
                                this.build(this.walkAnimation.direction);
                                this.status = this.WALKING;
                                break;
                        }

                        // Hit testing the screen width, otherwise our sprite would disappear
//                        if (this.walkAnimation.x >= this.screen_width - 16) {
//                            // We've reached the right side of our screen
//                            // We need to walk left now to go back to our initial position
//                            this.walkAnimation.direction = -90;
//                            this.walkAnimation.gotoAndPlay("walk");
//                        }
//
//                        if (this.walkAnimation.x < 16) {
//                            // We've reached the left side of our screen
//                            // We need to walk right now
//                            this.walkAnimation.direction = 90;
//                            this.walkAnimation.gotoAndPlay("walk_h");
//                            this.stage.removeChild(this.walkAnimation);
//                            this.fallAnimation.gotoAndPlay("fall");
//                            this.stage.addChild(this.fallAnimation);
//
//                        }
//
//                        // Moving the sprite based on the direction & the speed
//                        if (this.walkAnimation.direction === 90) {
//                            this.walkAnimation.x += this.walkAnimation.vX;
//                            this.walkAnimation.y += this.walkAnimation.vY;
//                        }
//                        else {
//                            this.walkAnimation.x -= this.walkAnimation.vX;
//                            this.walkAnimation.y -= this.walkAnimation.vY;
//                        }
                    };

                    return lemming;
                }
            };

        });