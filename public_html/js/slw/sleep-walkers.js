var canvas;
var stage;
var screen_width;
var screen_height;
var bmpAnimation;
var sprites;

function init() {
    canvas = document.getElementById('gameCanvas');

    sprites = (function() {

        var MAX_IMAGES = 2;
        var loadedImgs = 0;

        var images = Array();

        var imgMonsterArun = new Image();
        imgMonsterArun.src = './img/MonsterARun.png';

        var imgMonsterAIdle = new Image();
        imgMonsterAIdle.src = './img/MonsterAIdle.png';

        images[0] = imgMonsterArun;
        images[1] = imgMonsterAIdle;

        for (var i = 0; i < images.length; i++) {
            images[i].onload = handleImageLoad;
            images[i].onerror = handleImageError;
        }

        return {
            monsterARun: images[0],
            monsterAIdle: images[1],
            doneLoading: function() {
                return loadedImgs === MAX_IMAGES;
            },
            incLoaded: function() {
                loadedImgs++;
            }
        };
    })();

}

function reset() {
    stage.removeAllChildren();
    createjs.Ticker.removeAllListeners();
    stage.update();
}

function handleImageLoad(e) {
    sprites.incLoaded();
    if (sprites.doneLoading()) {
        startGame();
    }
}


function startGame() {

    //Create a new stage.
    stage = new createjs.Stage(canvas);

    //Save canvas dimensions for later calcs
    screen_width = canvas.width;
    screen_height = canvas.height;

    //Create spritesheet and assign the associated data
    var spriteSheet = new createjs.SpriteSheet({
        //Image to use
        images: [sprites.monsterARun],
        //Width, height and registration point of each sprite
        frames: {width: 64, height: 64, regX: 32, regY: 32},
        // To slow down the animation loop of the sprite, we set the frequency to 4 to slow down by a 4x factor
        animations: {
            walk: [0, 9, 'walk', 6]
        }
    });

    // To save file size, the loaded sprite sheet only includes left facing animations
    // we could flip the display objects with scaleX=-1, but this is expensive in most browsers
    // instead, we generate a new sprite sheet which includes the flipped animations
    createjs.SpriteSheetUtils.addFlippedFrames(spriteSheet, true, false, false);

    // Idle sequence of the monster
    var spriteSheetIdle = new createjs.SpriteSheet({
        images: [sprites.monsterAIdle],
        frames: {width: 64, height: 64, regX: 32, regY: 32},
        animations: {
            idle: [0, 10, "idle", 4]
        }
    });

    bmpAnimationIdle = new createjs.BitmapAnimation(spriteSheetIdle);
    bmpAnimationIdle.name = "monsteridle1";
    bmpAnimationIdle.x = 16;
    bmpAnimationIdle.y = 32;


    //Create a BitmapAnimation instance to display and play back the sprite sheet:
    bmpAnimation = new createjs.BitmapAnimation(spriteSheet);

    // set the registration point (the point it will be positioned and rotated around)
    // to the center of the frame dimensions:
    bmpAnimation.regX = bmpAnimation.spriteSheet.frameWidth / 2 | 0;
    bmpAnimation.regY = bmpAnimation.spriteSheet.frameHeight / 2 | 0;

    // walk_h has been generated by addFlippedFrames and
    // contained the right facing animations
    bmpAnimation.gotoAndPlay("walk_h"); 	//walking from left to right

    // set up a shadow. Note that shadows are ridiculously expensive. You could display hundreds
    // of animated rats if you disabled the shadow.
    bmpAnimation.shadow = new createjs.Shadow("#454", 0, 5, 4);

    bmpAnimation.name = 'monster1';
    bmpAnimation.direction = 90;
    bmpAnimation.vX = 1;
    bmpAnimation.vY = 0;
    bmpAnimation.x = 16;
    bmpAnimation.y = 32;

    //Have each monster start at a specific frame
    bmpAnimation.currentFrame = 10;
    stage.addChild(bmpAnimation);

    //
    createjs.Ticker.addListener(window);
    createjs.Ticker.useRAF = true;
    //Best framerate targeted (60 fps)
    createjs.Ticker.setFPS(60);

}

function handleImageError(e) {
    console.log('Error loading Image: ' + e.target.src);
}

function tick() {

    // Hit testing the screen width, otherwise our sprite would disappear
    if (bmpAnimation.x >= screen_width - 16) {
        // We've reached the right side of our screen
        // We need to walk left now to go back to our initial position
        bmpAnimation.direction = -90;
        bmpAnimation.gotoAndPlay("walk")
    }

    if (bmpAnimation.x < 16) {
        // We've reached the left side of our screen
        // We need to walk right now
        bmpAnimation.direction = 90;
        bmpAnimation.gotoAndPlay("walk_h");
        stage.removeChild(bmpAnimation);
        bmpAnimationIdle.gotoAndPlay("idle");
        stage.addChild(bmpAnimationIdle);

    }

    // Moving the sprite based on the direction & the speed
    if (bmpAnimation.direction === 90) {
        bmpAnimation.x += bmpAnimation.vX;
        bmpAnimation.y += bmpAnimation.vY;
    }
    else {
        bmpAnimation.x -= bmpAnimation.vX;
        bmpAnimation.y -= bmpAnimation.vY;
    }

    //Update the stage
    stage.update();

}
